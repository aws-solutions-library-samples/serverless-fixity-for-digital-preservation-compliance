# Serverless Fixity for Digital Preservation Compliance Solution
#
# template for serverless-fixity-for-digital-preservation-compliance
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: "2010-09-09"

Description: (%%SOLUTION_ID%%) Serverless Fixity for Digital Preservation Compliance solution. Version %%VERSION%%

#
# Mappings to store static value of the solution
#
Mappings:
    Solution:
        Project:
            Id: "%%SOLUTION_ID%%"
            Version: "%%VERSION%%"
            CustomUserAgent: AWSSOLUTION/%%SOLUTION_ID%%/%%VERSION%%
        Template:
            KeyPrefix: "%%KEYPREFIX%%"
            S3Bucket: "%%BUCKET_NAME%%"
        Package:
            CustomResourceX: "%%PKG_CUSTOM_RESOURCES%%"
        SNS:
            DisplayName: Fixity
        APIGateway:
            StageName: demo
    AnonymousData:
        SendAnonymousData:
            Data: Yes

Parameters:
    # ContentBucketList
    ContentBucketList:
        Type: String
        Description: a list of bucket names that the solution can access, separated by comma. ie., BucketA,BucketB,BucketC. Using asterisk (*) allows the solution to access all buckets and objects in your AWS Account.
        AllowedPattern: (^\*$)|([a-z0-9][a-z0-9-]{1,61}[a-z0-9]){1}(,[a-z0-9][a-z0-9-]{1,61}[a-z0-9]){0,}
        ConstraintDescription: must be either * or a list of valid S3 Bucket name, separated by comma
        Default: "*"
    # SNS parameter
    Email:
        Type: String
        Description: subscribe to receive notification from the solution
        AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    # API Gateway parameter
    AllowOrigins:
        Type: String
        Description: limit access to specified origin
        Default: "*"
    # Cross account access
    VendorAccountRoleList:
        Type: String
        Description: a list of IAM roles of different vendor accounts, separated by comma. ie., arn:aws:iam::000000000000:role/AccountARole,arn:aws:iam::111111111111:role/AccountBRole. LEAVE IT BLANK if you don't have any cross account (vendor) roles.
        AllowedPattern: (^$)|(arn:aws:iam::[0-9]{12}:role/[a-zA-Z0-9_+=.@/-]{3,64}){1}(,arn:aws:iam::[0-9]{12}:role/[a-zA-Z0-9_+=.@/-]{3,64}){0,}
        ConstraintDescription: must be either Blank or a list of valid IAM role ARN such as arn:aws:iam::{accountA}:role/RoleA,arn:aws:iam::{accountB}:role/RoleB, separated by comma

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Amazon S3
                Parameters:
                    - ContentBucketList
            -
                Label:
                    default: Amazon Simple Notification Service (SNS)
                Parameters:
                    - Email
            -
                Label:
                    default: CORS Configuration
                Parameters:
                    - AllowOrigins
            -
                Label:
                    default: Vendor (Cross Account) Configuration
                Parameters:
                    - VendorAccountRoleList
        ParameterLabels:
            ContentBucketList:
                default: Content Bucket List
            Email:
                default: Email address
            AllowOrigins:
                default: Access-Control-Allow-Origin
            VendorAccountRoleList:
                default: List of vendor's IAM Roles

Conditions:
    bEmail: !Not
        - !Equals
            - !Ref Email
            - ""

Resources:
    #####################################################################################
    #
    # Custom Resource - helper function to create custom resource
    #
    #####################################################################################
    CustomResourceExecutionRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: "This wildcard is present as the custom resource lambda needs to be able to access contents within the bucket!"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service:
                                - lambda.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub
                        - ${solutionId}-${AWS::StackName}-custom-resources
                        - solutionId: !FindInMap
                            - Solution
                            - Project
                            - Id
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

                            ## SNS
                            -
                                Effect: Allow
                                Action: sns:Subscribe
                                Resource: !Sub
                                    - arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${solutionId}-${AWS::StackName}-serverless-fixity
                                    - solutionId: !FindInMap
                                        - Solution
                                        - Project
                                        - Id

    CustomResourceFunction:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Not using VPC
                    -
                        id: W92
                        reason: Not using ReservedConcurrentExecutions feature
        Type: AWS::Lambda::Function
        Properties:
            Description: !Sub
                - (${solutionId}) ${AWS::StackName} custom resources
                - solutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 300
            Handler: index.Run
            Role: !GetAtt CustomResourceExecutionRole.Arn
            Code:
                S3Bucket: !Sub
                    - ${bucket}-${AWS::Region}
                    - bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                S3Key: !Sub
                    - ${keyprefix}/${package}
                    -
                        keyprefix: !FindInMap
                            - Solution
                            - Template
                            - KeyPrefix
                        package: !FindInMap
                            - Solution
                            - Package
                            - CustomResourceX

    #####################################################################################
    #
    # Generate random solution UUID
    #
    #####################################################################################
    CreateSolutionUuid:
        Type: Custom::CreateSolutionUuid
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            FunctionName: CreateSolutionUuid

    SendConfig:
        DependsOn: ApiGatewayStack
        Type: Custom::SendConfig
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            FunctionName: SendConfig
            SolutionId: !FindInMap
                - Solution
                - Project
                - Id
            Version: !FindInMap
                - Solution
                - Project
                - Version
            MetricsUuid: !GetAtt CreateSolutionUuid.Uuid
            AnonymousUsage: !FindInMap
                - AnonymousData
                - SendAnonymousData
                - Data

    #####################################################################################
    #
    # SNS Topic - subscribe to SNS topic to receive notification from the solution
    #
    #####################################################################################
    SNSTopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: !Sub
                - ${solutionId}-${AWS::StackName}-serverless-fixity
                - solutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
            DisplayName: !FindInMap
                - Solution
                - SNS
                - DisplayName
            KmsMasterKeyId: alias/aws/sns

    SNSTopicPolicy:
        Type: AWS::SNS::TopicPolicy
        Properties:
            Topics:
                - !Ref SNSTopic
            PolicyDocument:
                Id: !Sub
                    - ${solutionId}-${AWS::StackName}-sns-policy
                    - solutionId: !FindInMap
                        - Solution
                        - Project
                        - Id
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: allow-lambda-publish
                        Effect: Allow
                        Principal:
                            Service: lambda.amazonaws.com
                        Action: sns:Publish
                        Resource: !Ref SNSTopic

    EmailSubscribeFunction:
        Condition: bEmail
        DependsOn: ApiGatewayStack
        Type: Custom::EmailSubscribe
        Properties:
            ServiceToken: !GetAtt CustomResourceFunction.Arn
            FunctionName: EmailSubscribe
            EmailList: !Ref Email
            TopicArn: !Ref SNSTopic

    #####################################################################################
    #
    # State Machine stack - state machine to restore, compute, and validate checksum
    #
    #####################################################################################
    StateMachinesStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - https://${bucket}-${AWS::Region}.s3.amazonaws.com/${keyprefix}/serverless-fixity-for-digital-preservation-compliance-state-machine-stack.template
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}-${AWS::Region}
                    - bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                RootStackName: !Ref AWS::StackName
                MetricsUuid: !GetAtt CreateSolutionUuid.Uuid
                SNSTopic: !GetAtt SNSTopic.TopicName
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                AnonymousUsage: !FindInMap
                    - AnonymousData
                    - SendAnonymousData
                    - Data
                ContentBucketList: !Join
                    - "/*,arn:aws:s3:::"
                    - !Split
                        - ","
                        - !Sub arn:aws:s3:::${ContentBucketList}/*
                VendorAccountRoleList: !Ref VendorAccountRoleList

    #####################################################################################
    #
    # API Gateway stack - create endpoint to start/stop serverless checksum state machine
    #
    #####################################################################################
    ApiGatewayStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - https://${bucket}-${AWS::Region}.s3.amazonaws.com/${keyprefix}/serverless-fixity-for-digital-preservation-compliance-api-stack.template
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}-${AWS::Region}
                    - bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                RootStackName: !Ref AWS::StackName
                ApiGatewayEndpointName: !Sub
                    - ${solutionId}-${AWS::StackName}-api
                    - solutionId: !FindInMap
                        - Solution
                        - Project
                        - Id
                StageName: !FindInMap
                        - Solution
                        - APIGateway
                        - StageName
                StateMachine: !GetAtt StateMachinesStack.Outputs.StateMachineName
                AllowOrigins: !Ref AllowOrigins
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent

Outputs:
    CustomUserAgent:
        Value: !FindInMap
            - Solution
            - Project
            - CustomUserAgent
        Description: Custom User Agent
    ## Custom Resource related
    CustomResourceExecutionRoleArn:
        Value: !GetAtt CustomResourceExecutionRole.Arn
        Description: Role Arn (Custom Resource)
    CustomResourceFunctionArn:
        Value: !GetAtt CustomResourceFunction.Arn
        Description: Lambda Arn (Custom Resource)
    ## SNS related
    SNSTopicArn:
        Value: !Ref SNSTopic
        Description: Topic Arn (SNS)
    ## State machine related
    StateMachineName:
        Value: !GetAtt StateMachinesStack.Outputs.StateMachineName
        Description: State Machine Name
    StateMachineServiceRoleArn:
        Value: !GetAtt StateMachinesStack.Outputs.ServiceRoleArn
        Description: Role Arn (State Machine Service)
    StateMachineLambdaList:
        Value: !GetAtt StateMachinesStack.Outputs.LambdaFunctionList
        Description: List of Lambda Functions (State Machine)
    StateMachineLambdaRoleList:
        Value: !GetAtt StateMachinesStack.Outputs.LambdaRoleList
        Description: List of Lambda Roles (State Machine Lambda)
    ## API Gateway related
    ApiId:
        Value: !GetAtt ApiGatewayStack.Outputs.ApiId
        Description: API Id
    ApiEndpoint:
        Value: !GetAtt ApiGatewayStack.Outputs.Endpoint
        Description: API Endpoint
    ## Vendor (cross-account)
    VendorCrossAccountPolicy:
        Value: !GetAtt StateMachinesStack.Outputs.VendorCrossAccountPolicy
        Description: Vendor IAM policy to allow assume specific roles. To add a new vendor, add the new vendor IAM Role to the Resources section of the policy.
