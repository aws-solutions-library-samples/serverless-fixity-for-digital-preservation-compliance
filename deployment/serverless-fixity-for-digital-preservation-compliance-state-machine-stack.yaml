# Serverless Fixity for Digital Preservation Solution
#
# template for serverless-fixity-for-digital-preservation-compliance-state-machine-stack
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: "2010-09-09"

Description: (%%SOLUTION_ID%%) Serverless Fixity for Digital Preservation. Create State machine resource to restore, compute, and validate checksum. Version %%VERSION%%

Mappings:
    Solution:
        Package:
            ServerlessFixity: "%%PKG_CHECKSUM%%"
        Layer:
            ResumableHash: "%%LAYER_RESUMABLE_HASH%%"
    Function:
        Handler:
            CheckRestoreStatus: index.CheckRestoreStatus
            ComputeChecksum:  index.ComputeChecksum
            FinalValidation:  index.FinalValidation
            OnChecksumError:  index.OnChecksumError

Parameters:
    S3Bucket:
        Type: String
        Description: solution bucket
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    KeyPrefix:
        Type: String
        Description: solution key prefix
    SolutionId:
        Type: String
        Description: solution ID
    RootStackName:
        Type: String
        Description: used to suffix resources
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    MetricsUuid:
        Type: String
        Description: unique solution uuid
    AnonymousUsage:
        Type: String
        Description: send ananymous usage data
    SNSTopic:
        Type: String
        Description: public status to SNS. Third Party should subscribe to receive the notification.
        AllowedPattern: "[a-zA-Z][a-zA-Z0-9-_]*"
    CustomUserAgent:
        Type: String
        Description: Solution User Agent
    ContentBucketList:
        Type: String
        Description: ContentBucketList
    # Cross account access
    VendorAccountRoleList:
        Type: String
        Description: VendorAccountRoleList
        AllowedPattern: (^$)|(arn:aws:iam::[0-9]{12}:role/[a-zA-Z0-9_+=.@/-]{3,64}){1}(,arn:aws:iam::[0-9]{12}:role/[a-zA-Z0-9_+=.@/-]{3,64}){0,}

Conditions:
    bVendorAccountRoleList: !Not
        - !Equals
            - !Ref VendorAccountRoleList
            - ""

Resources:
    ################################################################################
    #
    # Lambda Layers shared among lambda resources
    # * ResumableHashLayer
    #
    ################################################################################
    ResumableHashLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: !Sub ${SolutionId}-${RootStackName}-resumable-hash-layer
            CompatibleArchitectures:
                - x86_64
            CompatibleRuntimes:
                - nodejs14.x
            Content:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub
                    - ${KeyPrefix}/${package}
                    - package: !FindInMap
                        - Solution
                        - Layer
                        - ResumableHash
            Description: !Sub (${SolutionId}-${RootStackName}) resumable-hash layer
            LicenseInfo: MIT-0

    #####################################################################################
    #
    # CheckRestoreStatus lambda (Serverless Fixity for Digital Preservation State machine)
    #
    #####################################################################################
    CheckRestoreStatusRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: This wildcard is present as state machine lambda needs to be able to access contents across buckets!
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service:
                                - lambda.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${SolutionId}-${RootStackName}-CheckRestoreStatus
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## S3
                            -
                                Effect: Allow
                                Action:
                                    - s3:GetObject
                                    - s3:RestoreObject
                                Resource: !Split
                                    - ","
                                    - !Ref ContentBucketList
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

    CheckRestoreStatus:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Not using VPC
                    -
                        id: W92
                        reason: Not using ReservedConcurrentExecutions feature
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${SolutionId}-${RootStackName}-CheckRestoreStatus
            Description: !Sub (${SolutionId}) Check object restore status
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 900
            Handler: !FindInMap
                - Function
                - Handler
                - CheckRestoreStatus
            Role: !GetAtt CheckRestoreStatusRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub
                    - ${KeyPrefix}/${package}
                    - package: !FindInMap
                        - Solution
                        - Package
                        - ServerlessFixity
            Layers:
                - !Ref ResumableHashLayer
            Environment:
                Variables:
                    ENV_SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_METRICS_UUID: !Ref MetricsUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_CUSTOM_USER_AGENT: !Ref CustomUserAgent

    #####################################################################################
    #
    # ComputeChecksum lambda (Serverless Fixity for Digital Preservation State machine)
    #
    #####################################################################################
    ComputeChecksumRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: This wildcard is present as state machine lambda needs to be able to access contents across buckets!
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service:
                                - lambda.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${SolutionId}-${RootStackName}-ComputeChecksum
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## S3
                            -
                                Effect: Allow
                                Action: s3:GetObject
                                Resource: !Split
                                    - ","
                                    - !Ref ContentBucketList
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

    ComputeChecksum:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Not using VPC
                    -
                        id: W92
                        reason: Not using ReservedConcurrentExecutions feature
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${SolutionId}-${RootStackName}-ComputeChecksum
            Description: !Sub (${SolutionId}) Compute MD5 checksum incrementally
            Runtime: nodejs14.x
            MemorySize: 2048
            Timeout: 900
            Handler: !FindInMap
                - Function
                - Handler
                - ComputeChecksum
            Role: !GetAtt ComputeChecksumRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub
                    - ${KeyPrefix}/${package}
                    - package: !FindInMap
                        - Solution
                        - Package
                        - ServerlessFixity
            Layers:
                - !Ref ResumableHashLayer
            Environment:
                Variables:
                    ENV_SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_METRICS_UUID: !Ref MetricsUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_CUSTOM_USER_AGENT: !Ref CustomUserAgent

    #####################################################################################
    #
    # FinalValidation lambda (Serverless Fixity for Digital Preservation  State machine)
    #
    #####################################################################################
    FinalValidationRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: This wildcard is present as state machine lambda needs to be able to access contents across buckets!
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service:
                                - lambda.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${SolutionId}-${RootStackName}-FinalValidation
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## S3
                            -
                                Effect: Allow
                                Action:
                                    - s3:GetObject
                                    - s3:GetObjectTagging
                                    - s3:GetObjectVersionTagging
                                    - s3:PutObjectTagging
                                    - s3:PutObjectVersionTagging
                                Resource: !Split
                                    - ","
                                    - !Ref ContentBucketList
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                            ## SNS
                            -
                                Effect: Allow
                                Action: sns:Publish
                                Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}

    FinalValidation:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Not using VPC
                    -
                        id: W92
                        reason: Not using ReservedConcurrentExecutions feature
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${SolutionId}-${RootStackName}-FinalValidation
            Description: !Sub (${SolutionId}) Validate MD5 checksum against a known one on the S3 object
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 300
            Handler: !FindInMap
                - Function
                - Handler
                - FinalValidation
            Role: !GetAtt FinalValidationRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub
                    - ${KeyPrefix}/${package}
                    - package: !FindInMap
                        - Solution
                        - Package
                        - ServerlessFixity
            Layers:
                - !Ref ResumableHashLayer
            Environment:
                Variables:
                    ENV_SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_METRICS_UUID: !Ref MetricsUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_CUSTOM_USER_AGENT: !Ref CustomUserAgent

    #####################################################################################
    #
    # Serverless Fixity for Digital Preservation  state machine
    #
    #####################################################################################
    StateMachineServiceRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -
                    Effect: Allow
                    Action: sts:AssumeRole
                    Principal:
                        Service:
                            - !Sub states.${AWS::Region}.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${SolutionId}-${RootStackName}-statemachine-service-role
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            -
                                Effect: Allow
                                Action: lambda:InvokeFunction
                                Resource:
                                    - !GetAtt CheckRestoreStatus.Arn
                                    - !GetAtt ComputeChecksum.Arn
                                    - !GetAtt FinalValidation.Arn

    ServerlessFixityStateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
            StateMachineName: !Sub ${SolutionId}-${RootStackName}-serverless-fixity
            RoleArn: !GetAtt StateMachineServiceRole.Arn
            DefinitionString:
                !Sub |-
                    {
                        "Comment": "Serverless Fixity for Digital Preservation Compliance state mahince to compute MD5 checksum incrementally",
                        "StartAt": "CheckRestoreStatus",
                        "States": {
                            "CheckRestoreStatus": {
                                "Type": "Task",
                                "Resource": "${CheckRestoreStatus.Arn}",
                                "Next": "RestoreCompleted?",
                                "Retry": [
                                    {
                                        "ErrorEquals": [
                                            "ForbiddenError"
                                        ],
                                        "MaxAttempts": 0
                                    },
                                    {
                                        "ErrorEquals": [
                                            "States.ALL"
                                        ],
                                        "IntervalSeconds": 1,
                                        "MaxAttempts": 4,
                                        "BackoffRate": 1.2
                                    }
                                ]
                            },
                            "RestoreCompleted?": {
                                "Type": "Choice",
                                "Choices": [
                                    {
                                        "Variable": "$.RestoreStatus",
                                        "StringEquals": "COMPLETED",
                                        "Next": "ComputeChecksum"
                                    }
                                ],
                                "Default": "Wait X seconds"
                            },
                            "Wait X seconds": {
                                "Type": "Wait",
                                "SecondsPath": "$.WaitInSeconds",
                                "Next": "CheckRestoreStatus"
                            },
                            "ComputeChecksum": {
                                "Type": "Task",
                                "Resource": "${ComputeChecksum.Arn}",
                                "Next": "MoreData?",
                                "Retry": [
                                    {
                                        "ErrorEquals": [
                                            "ForbiddenError"
                                        ],
                                        "MaxAttempts": 0
                                    },
                                    {
                                        "ErrorEquals": [
                                            "States.ALL"
                                        ],
                                        "IntervalSeconds": 1,
                                        "MaxAttempts": 4,
                                        "BackoffRate": 1.2
                                    }
                                ]
                            },
                            "MoreData?": {
                                "Type": "Choice",
                                "Choices": [
                                    {
                                        "Variable": "$.Status",
                                        "StringEquals": "COMPLETED",
                                        "Next": "FinalValidation"
                                    }
                                ],
                                "Default": "ComputeChecksum"
                            },
                            "FinalValidation": {
                                "Type": "Task",
                                "Resource": "${FinalValidation.Arn}",
                                "End": true
                            }
                        }
                    }

    #####################################################################################
    #
    # State Machine Error Handling
    # * OnChecksumError lambda
    # * EventBridge Event Rule
    #
    #####################################################################################
    OnChecksumErrorRole:
        Type: AWS::IAM::Role
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W11
                        reason: This wildcard is present as state machine lambda needs to be able to access contents across buckets!
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service:
                                - lambda.amazonaws.com
            Path: /
            Policies:
                -
                    PolicyName: !Sub ${SolutionId}-${RootStackName}-OnChecksumError
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
                            ## SNS
                            -
                                Effect: Allow
                                Action: sns:Publish
                                Resource:
                                    - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
                            # Step Functions
                            -
                                Effect: Allow
                                Action:
                                    - states:DescribeExecution
                                    - states:GetExecutionHistory
                                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${ServerlessFixityStateMachine.Name}:*

    OnChecksumError:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Not using VPC
                    -
                        id: W92
                        reason: Not using ReservedConcurrentExecutions feature
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Sub ${SolutionId}-${RootStackName}-OnChecksumError
            Description: !Sub (${SolutionId}) Manage checksum error from state machine. Send SNS notification
            Runtime: nodejs14.x
            MemorySize: 128
            Timeout: 300
            Handler: !FindInMap
                - Function
                - Handler
                - OnChecksumError
            Role: !GetAtt OnChecksumErrorRole.Arn
            Code:
                S3Bucket: !Ref S3Bucket
                S3Key: !Sub
                    - ${KeyPrefix}/${package}
                    - package: !FindInMap
                        - Solution
                        - Package
                        - ServerlessFixity
            Layers:
                - !Ref ResumableHashLayer
            Environment:
                Variables:
                    ENV_SNS_TOPIC_ARN: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${SNSTopic}
                    ENV_SOLUTION_ID: !Ref SolutionId
                    ENV_METRICS_UUID: !Ref MetricsUuid
                    ENV_ANONYMOUS_USAGE: !Ref AnonymousUsage
                    ENV_CUSTOM_USER_AGENT: !Ref CustomUserAgent

    StateMachineErrorHandlingEvent:
        Type: AWS::Events::Rule
        Properties:
            Name: !Sub ${SolutionId}-${RootStackName}-statemachine-error
            Description: !Sub (${SolutionId}-${RootStackName}) Step Functions Execution Status Change Event Rule
            EventPattern:
                source:
                    - aws.states
                region:
                    - !Ref AWS::Region
                detail-type:
                    - Step Functions Execution Status Change
                detail:
                    status:
                        - FAILED
                        - ABORTED
                        - TIMED_OUT
                    stateMachineArn:
                        - !Ref ServerlessFixityStateMachine
            State: ENABLED
            Targets:
                -
                    Id: Id-StateMachineErrorHandling
                    Arn: !GetAtt OnChecksumError.Arn

    StateMachineErrorHandlingPermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref OnChecksumError
            Action: lambda:InvokeFunction
            Principal: events.amazonaws.com
            SourceArn: !GetAtt StateMachineErrorHandlingEvent.Arn

    ################################################################################
    #
    # IAM Role: Vendor policy to assume role. Attach role to:
    # - CheckRestoreStatusRole
    # - ComputeChecksumRole
    # - FinalValidationRole
    # - OnChecksumErrorRole
    #
    ################################################################################
    VendorCrossAccountPolicy:
        Type: AWS::IAM::Policy
        Properties:
            Roles:
                - !Ref CheckRestoreStatusRole
                - !Ref ComputeChecksumRole
                - !Ref FinalValidationRole
                - !Ref OnChecksumErrorRole
            PolicyName: !Sub ${SolutionId}-${RootStackName}-VendorPolicy
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    # STS - assume vendor role
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Resource: !If
                            - bVendorAccountRoleList
                            - !Split
                                - ","
                                - !Ref VendorAccountRoleList
                            - !Sub arn:aws:iam::${AWS::AccountId}:role/placeholder

Outputs:
    LambdaRoleList:
        Value: !Join
            - ","
            -
                - !Ref CheckRestoreStatusRole
                - !Ref ComputeChecksumRole
                - !Ref FinalValidationRole
                - !Ref OnChecksumErrorRole
        Description: List of Lambda Roles (State Machine)
    ServiceRoleArn:
        Value: !GetAtt StateMachineServiceRole.Arn
        Description: Role Arn (State Machine Service)
    CheckRestoreStatus:
        Value: !GetAtt CheckRestoreStatus.Arn
        Description: Lambda Arn (CheckRestoreStatus)
    ComputeChecksumArn:
        Value: !GetAtt ComputeChecksum.Arn
        Description: Lambda Arn (ComputeChecksum)
    FinalValidationArn:
        Value: !GetAtt FinalValidation.Arn
        Description: Lambda Arn (FinalValidation)
    OnChecksumErrorArn:
        Value: !GetAtt OnChecksumError.Arn
        Description: Lambda Arn (OnChecksumError)
    StateMachineArn:
        Value: !Ref ServerlessFixityStateMachine
        Description: State Machine Arn
    StateMachineName:
        Value: !GetAtt ServerlessFixityStateMachine.Name
        Description: State Machine Name
    LambdaFunctionList:
        Value: !Join
            - ","
            -
                - !Ref CheckRestoreStatus
                - !Ref ComputeChecksum
                - !Ref FinalValidation
                - !Ref OnChecksumError
        Description: List of Lambda functions (State Machine)
    VendorCrossAccountPolicy:
        Value: !Ref VendorCrossAccountPolicy
        Description: VendorCrossAccountPolicy
    ContentBucketList:
        Value: !Ref ContentBucketList
        Description: ContentBucketList
